<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#@ assembly name="$(SolutionDir)\Magicodes.Web\bin\Magicodes.Web.Interfaces.dll" #>
<#@ import namespace="Magicodes.Web.Interfaces.Config.Info" #>
<#@ import namespace="Magicodes.Web.Interfaces.Config" #>
<#@ assembly name="$(SolutionDir)\Magicodes.Web\bin\Magicodes.Core.dll" #>
<#@ import namespace="Magicodes.Core.Plus" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ include file="$(SolutionDir)\T4\MultiOutput.tt" #>
<# 
    
    var assembly=typeof(SiteConfigInfo).Assembly;
    var types=assembly.GetTypes().Where(p => p.IsClass && p.IsSubclassOf(typeof(ConfigBase)));
    foreach(var config in types)
    {
        //是否忽略生成此类
        var T4GenerationIgnoreAttribute=AssemblyManager.GetAttribute<Magicodes.Web.Interfaces.T4.T4GenerationIgnoreAttribute>(config,false);
        if(T4GenerationIgnoreAttribute!=null) continue;
        var descriptionAttr=AssemblyManager.GetAttribute<System.ComponentModel.DescriptionAttribute>(config,false);
        var title=descriptionAttr == null ? "" : descriptionAttr.Description;
        var name=config.Name;
    
#>
using Magicodes.Core.Web.Controllers;
using Magicodes.Web.Interfaces;
using Magicodes.Web.Interfaces.Config.Info;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http;

//======================================================================
//
//        Copyright (C) 2014-2016 Magicodes团队    
//        All rights reserved
//
//        filename :<#= name #>Controller
//        description :<#=            title #> WebAPI
//
//        created by 雪雁 at  <#=            DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss") #>
//        http://www.magicodes.net
//
//======================================================================
namespace Magicodes.Services.Mvc.Controller.Config
{
    /// <summary>
    /// <#=            title #>
    /// </summary>
    [Authorize]
    [RoutePrefix("api/config/<#=            name #>")]

    public class <#=            name #>Controller : WebAPIControllerBase
    {
        // /api/config/<#=            name #>
        [HttpGet]
        [Route("")]
        public IHttpActionResult Get()
        {
            var m = ApplicationContext.ConfigManager.GetConfig<<#=            name #>>();
            if (m == null)
                return NotFound();
            return Ok(m);
        }

        // POST /api/config/<#=            name #>
        [HttpPost]
        [Route("")]
        public async Task<IHttpActionResult> Post(<#=            name #> info)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);
            info.UpdateTime = DateTime.Now;

            ApplicationContext.ConfigManager.SaveConfig<<#=            name #>>(info);
            return Created<<#=            name #>>("api/config/<#=            name #>", info);
        }


        // PUT /api/config/<#=            name #>
        [HttpPut]
        [Route("")]
        public async Task<IHttpActionResult> Put(<#=            name #> info)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);
            info.UpdateTime = DateTime.Now;
            GlobalApplicationObject.Current.ApplicationContext.ConfigManager.SaveConfig<<#=            name #>>(info);
            return Ok(info);
        }
    }
}

<#
        SaveOutput(config.Name+"Controller.cs");
    }
    DeleteOldOutputs();
#>
